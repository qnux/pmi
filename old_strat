

//     __    __    ______   .___  ___.   ______    __
//    |  |  |  |  /  __  \  |   \/   |  /  __  \  |  |
//    |  |__|  | |  |  |  | |  \  /  | |  |  |  | |  |
//    |   __   | |  |  |  | |  |\/|  | |  |  |  | |  |
//    |  |  |  | |  `--'  | |  |  |  | |  `--'  | |  `----.
//    |__|  |__|  \______/  |__|  |__|  \______/  |_______|
//

void strat_homol(){
	digitalWrite(PAP_ENABLE, LOW);

	// By default, enable avoidance
	// Is is disable after in the states
	detection.activateAll();

	switch (state_homol)
	{
	case HO_BEGIN:
		detection.disableRear();
		delay(2000);
		state_homol = HO_RECALAGE_START;
		nav.startTraj();
		break;
	case HO_RECALAGE_START:
		detection.disableRear();
		if (nav.straight(-20))
		{
			nav.setOdom(1500-X_AR, -100+Y_GAUCHE, -M_PI);
			state_homol = HO_LIGNE1;
		}
		break;
	case HO_LIGNE1:
		detection.disableRear();
		if (nav.straight(60.0))
			state_homol = HO_SNEAK_WALL;
		break;
	case HO_SNEAK_WALL:
		detection.disableRear();
		if (nav.go_s(1400,750))
			state_homol = HO_ACCOSTAGE_START_CABIN;
		break;
	case HO_ACCOSTAGE_START_CABIN:
		detection.disableRear();
		if (nav.go_s(1200,750))
			state_homol = HO_RECUL_PUSH_START_CABIN;
		break;
	case HO_RECUL_PUSH_START_CABIN:
		detection.disableRear();
		if (nav.go_s(1200,1000,MARCHE_AR))
		{
			// recal to cabin door
			nav.setOdom(nav.getX_uncolored(),1000-10-X_AR,-M_PI/2.0);
			state_homol = HO_DEGAGEMENT_START_CABIN;
			nav.startTraj();
		}
		break;
	case HO_DEGAGEMENT_START_CABIN:
		detection.disableRear();
		if (nav.straight(100))
			state_homol = HO_ACCOSTAGE_DUNE_CABIN;
		break;
	case HO_ACCOSTAGE_DUNE_CABIN:
		if (nav.go_s(900,750))
			state_homol = HO_RECUL_PUSH_DUNE_CABIN;
		break;
	case HO_RECUL_PUSH_DUNE_CABIN:
		detection.disableRear();
		if (nav.go_s(900,1000,MARCHE_AR))
		{
			// recal to cabin door
			nav.setOdom(nav.getX_uncolored(),1000-10-X_AR,-M_PI/2.0);
			state_homol = HO_LIGNE6;
		}
		break;
	case HO_LIGNE6:
		detection.disableRear();
		if (nav.go_s(900,500))
			state_homol = HO_VIRAGE6;
		break;
	case HO_VIRAGE6:
		detection.disableFront();
		if (nav.go_s(200,500,MARCHE_AR))
			state_homol = HO_LIGNE6;
		break;
	case HO_GO_DUNE:

		break;
	case HO_BACK_DUNE:

		break;
	default:;
	}
}












void square(){

	digitalWrite(PAP_ENABLE, LOW);
	switch (state1)
	{
	case BEGIN:
		state1 = LIGNE1;
		break;
	case LIGNE1:
		rgb.set(YELLOW,FAST);
		if(nav.go_s(500,0))
		{
			Serial.println("LIGNE1 -> LIGNE2");
			state1 = LIGNE2;
		}
		break;
	case LIGNE2:
		rgb.set(PURPLE,FAST);
		if(nav.go_s(500,500))
		{
			Serial.println("LIGNE2 -> LIGNE3");
			state1 = LIGNE3;
		}
		break;
	case LIGNE3:
		rgb.set(CYAN,FAST);
		if(nav.go_s(0,500))
		{
			Serial.println("LIGNE3 -> LIGNE4");
			state1 = LIGNE4;
		}
		break;
	case LIGNE4:
		rgb.set(GREEN,FAST);
		if(nav.go_s(0,0))
		{
			Serial.println("LIGNE4 -> LIGNE5");
			state1 = LIGNE5;
			nav.startTraj();
		}
		break;
	case LIGNE5:
		rgb.set(GREEN,FAST);
		if(nav.turn(M_PI/2))
		{
			Serial.println("LIGNE5 -> BEGIN");
			state1 = BEGIN;
			started = false;
		}
		break;
	default:;
	}
}
